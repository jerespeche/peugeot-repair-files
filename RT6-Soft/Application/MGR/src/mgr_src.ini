
/* Typedefs */

typedef unsigned int  bool;
typedef int           STATUS;
typedef void *        MODULE_ID;

#define true          (bool)1
#define false         (bool)0
#define NULL          (void*)0

#define ERROR         ((STATUS)-1)
#define OK            ((STATUS)0)

#define O_RDONLY              0
#define LOAD_NO_SYMBOLS       2
#define LOAD_LOCAL_SYMBOLS    4
#define LOAD_GLOBAL_SYMBOLS   8

/* Functions declaration */

int ModuleLoad(
                const char* p_root,
                const char* p_file_type,
                const char* p_module_type,
                const char* p_module_name,
                const char* p_bin_name,
                bool        p_open_flag
            );
MODULE_ID LoadAndExecuteFile( const char*    p_root,
                              const char*   p_file_name,
                              int           p_ld_symb,
                              int           p_invalid,
                              unsigned int  p_delay);
bool IsAppliBootFromHDD(void);

int main(void)
{
  int l_val = OK;
  MODULE_ID l_Module_Id = NULL;

  if (OK == l_val)
  {
    l_val = ModuleLoad(NULL,"Application","BCM","CMM",NULL,true);
  }
  if (OK == l_val)
  {
    l_val = ModuleLoad(NULL,"Application","BCM","USR_PROF",NULL,true);
  }

  if (OK == l_val)
  {
    if (IsAppliBootFromHDD())
    {
      if (OK == l_val)
      {
        l_val = ModuleLoad(NULL,"Application","MGR","SRC","mgr_src.out",true);
      }

      if (OK == l_val)
      {
        l_Module_Id = LoadAndExecuteFile(NULL, "MGR/SRC/lib_source.out", LOAD_GLOBAL_SYMBOLS, 0, 0);
      }
    }
    else
    {
      if (OK == l_val)
      {
        l_val = ModuleLoad(NULL,"Application","MGR","SRC","mgr_src.gz",true);
      }

      if (OK == l_val)
      {
        l_Module_Id = LoadAndExecuteFile(NULL, "MGR/SRC/lib_source.gz", LOAD_GLOBAL_SYMBOLS, 0, 0);
      }
    }
    if ( NULL == l_Module_Id )
    {
      l_val = ERROR;
    }
  }

  return (l_val);
}

