
/* Typedefs */

typedef unsigned int      bool;
typedef int               STATUS;
typedef void *            MODULE_ID;
typedef void *            FILE;
typedef int               size_t;

#define true              (bool)1
#define false             (bool)0
#define NULL              (void*)0

#define ERROR             ((STATUS)-1)
#define OK                ((STATUS)0)

#define O_RDONLY                0
#define LOAD_NO_SYMBOLS         2
#define LOAD_LOCAL_SYMBOLS      4
#define LOAD_GLOBAL_SYMBOLS     8

#define BCM_GPH_DIR_SIZE    128

/* Functions declaration */

int ModuleLoad(
                const char* p_root,
                const char* p_file_type,
                const char* p_module_type,
                const char* p_module_name,
                const char* p_bin_name,
                bool        p_open_flag
            );

STATUS LoadGPH(bool p_flag);

int ModuleLoadConfig(
                const char* p_root,
                const char* p_file_type,
                const char* p_module_type,
                const char* p_module_name,
                const char* p_path_config_flag,
                const char* p_bin_name,
                bool        p_open_flag
            );

STATUS SearchSubDir( const char* p_root,
                            const char* p_sub_name,
                            const char* p_option_sub_name,
                            char*       p_result,
                            int         p_result_length);

MODULE_ID LoadAndExecuteFile( const char*    p_root,
                              const char*   p_file_name,
                              int           p_ld_symb,
                              int           p_invalid,
                              unsigned int  p_delay);
int logMsg
    (
    char * fmt,
    int    arg1,
    int    arg2,
    int    arg3,
    int    arg4,
    int    arg5,
    int    arg6
    );

bool IsAppliBootFromHDD(void);
FILE * fopen
    (
    const char * file,        /* name of file */
    const char * mode         /* mode */
    );
int fclose
    (
    FILE * fp                 /* stream to close */
    );
int atoi
    (
    const char * s            /* pointer to string */
    );
STATUS taskDelay
    (
    int ticks                 /* number of ticks to delay task */
    );
char * fgets
    (
    char * buf,               /* where to store characters */
    size_t n,                 /* no. of bytes to read + 1 */
    FILE * fp                 /* stream to read from */
    );

int main(void)
{
  int l_val = OK;
  MODULE_ID l_Module_Id = NULL;
  STATUS l_status;

  FILE * l_LdDelayFile;
  char l_LdDelayBuffer[11];
  int l_LdDelay = 0;

  char l_BCM_GPH_Directory[BCM_GPH_DIR_SIZE];

  l_LdDelayFile = fopen("/bd0/GPH_LdDelay/GPH_LdDelay.txt", "r");
	if (NULL != l_LdDelayFile)
	{
	    if (NULL != fgets(l_LdDelayBuffer, sizeof(l_LdDelayBuffer), l_LdDelayFile))
	    {
	      l_LdDelay = atoi(l_LdDelayBuffer);
	    }
	    fclose(l_LdDelayFile);

	    if (l_LdDelay > 0)
	    {
	      logMsg("-- GPH Load is delayed for %d ticks, wait please ...\r\n", l_LdDelay,0,0,0,0,0);
	      taskDelay(l_LdDelay);
	      logMsg("-- GPH Load has been delayed during %d ticks\r\n", l_LdDelay,0,0,0,0,0);
	    }
	}

	if ( OK == l_val )
	{
		if (IsAppliBootFromHDD())
		{
			if (ERROR == LoadGPH(true))
				{
					l_val = ERROR;
				}
			else 
				l_val = OK;		   

			if ( OK == l_val )
			{
				logMsg("-- BCM_GPH application correctly loaded\r\n", 0,0,0,0,0,0);
			}
			else
			{
				logMsg("-- BCM_GPH application loading failed\r\n", 0,0,0,0,0,0);
	        }
		}
		
	    else
	    {
			logMsg("-- BCM_GPH application loading failed\r\n", 0,0,0,0,0,0);
               l_val = ERROR;
           }
         }
  return(l_val);
}

STATUS LoadGPH(bool p_flag)
{
  int l_val = OK;
  char l_BCM_GPH_Directory[BCM_GPH_DIR_SIZE];
   MODULE_ID l_Module_Id = NULL;
  STATUS l_status;
  l_status = SearchSubDir(NULL, "BCM", "GPH", l_BCM_GPH_Directory, BCM_GPH_DIR_SIZE);

  if (ERROR == l_status)
  {
	l_val = ERROR;
  } 
  if ( OK == l_val )
  {	
	logMsg("-- BCM_GPH boots from SDC\r\n", 0,0,0,0,0,0);	
      l_val = ModuleLoadConfig(NULL,"Application","BCM","GPH","RNEG","BCM_GPH.gz",true);
  }
  return(l_val);
}
